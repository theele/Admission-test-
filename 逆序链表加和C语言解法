#include<stdlib.h>
#include<stdio.h>
typedef struct node{
int num;
struct node *next;
}nodet;
void main(){
nodet *a=(nodet *)malloc(sizeof(nodet));
nodet *a1=(nodet *)malloc(sizeof(nodet));
nodet *a2=(nodet *)malloc(sizeof(nodet));
nodet *b=(nodet *)malloc(sizeof(nodet));
nodet *b1=(nodet *)malloc(sizeof(nodet));
nodet *b2=(nodet *)malloc(sizeof(nodet));
nodet *c=(nodet *)malloc(sizeof(nodet));
nodet *c1=(nodet *)malloc(sizeof(nodet));
nodet *c2=(nodet *)malloc(sizeof(nodet));
a->num=2;
a->next=a1;
a1->num=4;
a1->next=a2;
a2->num=3;
a2->next=NULL;
b->num=5;
b->next=b1;
b1->num=6;
b1->next=b2;
b2->num=4;
b2->next=NULL;
c->next=c1;
c1->next=c2;
c2->next=NULL;
int up=0;
nodet *cf=c;
nodet *af=a;
nodet *bf=b;
while(cf!=NULL){
cf->num=af->num+bf->num+up;
if(cf->num>=10)
{
up=1;
cf->num=cf->num-10;
}
else{
up=0;
}
cf=cf->next;
af=af->next;
bf=bf->next;
}
nodet *cp=c;
while(cp!=NULL){
printf("%d",cp->num);
cp=cp->next;
}

C++：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode cur1 = l1; 
        ListNode cur2 = l2;
        int count = 0;//每位之和
        int s = 0;//进位
        
        while(cur1.next != null && cur2.next != null){//加到其中有一个链表剩一位，或者两个链表都只剩一位
            count = cur1.val + cur2.val + s;
            if(count > 9){
                cur1.val = count % 10 ;
                cur2.val = count % 10 ;
                s = 1;
            }else{
                cur1.val = count;
                cur2.val = count;
                s = 0;
            }
            cur1 = cur1.next;
            cur2 = cur2.next;
            
        }
        
        if(cur1.next == null && cur2.next == null){ //当两个链表都只剩一位时
            count = cur1.val + cur2.val +s;
            if(count > 9)
            {
                cur1.val = count % 10;
                cur2.val = count % 10;
                s = 1;
            }else{
                cur1.val = count ;
                cur2.val = count ;
                s = 0;
            }
            if(s == 1){  //说明最后两个数产生了进位，需要扩充链表。
                ListNode tmp = new ListNode(1);
                cur1.next = tmp;
                return l1;
            }
            return l1;
        }
        
        if(cur1.next == null){  //cur1链表剩一位
            count = cur1.val + cur2.val + s ;
            cur2.val = cur1.val + cur2.val;
            if(count < 10){  //cur1的最后一位加cur2的一位 没产生进位，直接返回
                cur2.val = count;
                return l2;
            }
            while(cur2.next != null){  //因为有进位，需要再把cur2的剩余数计算 直到最后一位
               count =  cur2.val + s;
               if(count > 9){
                   cur2.val = count % 10 ;
                   s = 1;
               } else{
                   cur2.val = count;
                   s = 0;
               }
                cur2 = cur2.next;
            }
            if(cur2.val + s > 9){  //判断cur2 最后一位是否产生进位
                cur2.val = (cur2.val + s) % 10;
                s = 1;
            }else{
                cur2.val = cur2.val +s;
                s = 0;
            }
            if(s == 1){  //产生进位，扩充链表
                ListNode tmp = new ListNode(1);
                cur2.next = tmp;
                return l2;
            }
            return l2;
        }else{  //cur2链表剩一位
            count = cur1.val + cur2.val + s;
            cur1.val = cur2.val + cur1.val;
            if(count < 10){ //cur2的最后一位加cur1的一位 没产生进位，直接返回
                cur1.val = count;
                return l1;
            }
            while(cur1.next != null){ //因为有进位，需要再把cur1的剩余数计算 直到最后一位
               count =  cur1.val + s;
               if(count > 9){
                   cur1.val = count % 10 ;
                   s = 1;
               } else{
                   cur1.val = count;
                   s = 0;
               }
                cur1 = cur1.next;
            }
            if(cur1.val + s > 9){  //判断cur1 最后一位是否产生进位
                cur1.val = (cur1.val + s) % 10;
                s = 1;
            }else{
                cur1.val = cur1.val +s;
                s = 0;
            }
            if(s == 1){  //产生进位，扩充链表
                ListNode tmp = new ListNode(1);
                cur1.next = tmp;
                return l1;
            }
        }
        return l1;
    }
}
